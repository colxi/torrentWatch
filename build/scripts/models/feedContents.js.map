{"version":3,"sources":["feedContents.es6"],"names":["feedContents","__constructor","Promise","_resolve","pg","load","module","then","model","r","Data","tasks","checkInFeed","save","id","undefined","contents","log","getAll","saveFlag","_reject","currentFeed","models","storage","feeds","reduce","sequence","get","result","name","length","resolve","f","url","status","code","details","lastCheck","Date","http","XMLHttpRequest","open","onload","parser","DOMParser","xmlDoc","parseFromString","responseText","JSONxml","JSON","parseXML","hasOwnProperty","rss","channel","item","onerror","statusText","send"],"mappings":"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","file":"feedContents.js","sourcesContent":["/* jsHint inline configuration : */\n/* jshint undef: true, unused: false */\n/* global chrome , System , pg , rivets , sightglass */\n\n\nlet feedContents = {\n\t__constructor(){\n\t\t return new Promise(function(_resolve){\n\t\t\tpg.load.module('JSON/parseXML')\n\t\t\t\t.then( r => pg.load.model('storage' , 'feeds') )\n\t\t\t\t.then( r=> _resolve(r) );\n        });\n\t},\n\n\tData : {},\n\n \ttasks : {},\n\n\tcheckInFeed(){\n\t    return new Promise( _resolve => {\n\t    \t_resolve();\n\t        /*\n\t        console.log('chromeExt.scheduler.initialize(): Scheduling SYNC for '+ chromeExt.Data.feeds.length+' feeds sources...');\n\t        console.log(chromeExt.Data);\n\t        for(let i=0; i<chromeExt.Data.feeds.length; i++){\n\t            console.log('chromeExt.scheduler.initialize(): Scheduling ' + chromeExt.Data.feeds[i].name +' (TTL : '+ chromeExt.Data.feeds[i].TTL + ' min)');\n\t            chromeExt.scheduler.tasks.push(\n\t                setInterval( function(){\n\t                    console.log('checking feed...');\n\t                }, chromeExt.Data.feeds[i].TTL * 60 * 1000)\n\t            );\n\t        }\n\t        */\n\t    });\n\t},\n\n\n\tsave(id=undefined,contents={}){\n\t\tif(id === undefined || id === null || id === ''){\n\t\t\tpg.log('[Model]:feedContents.save() : No id provided. Returning...', 'warn');\n\t\t\treturn -1;\n\t\t}\n\t\tpg.log('[Model]:feedContents.save() : Saving feed ('+id+') Contents...');\n\t\tfeedContents.Data[id] = contents;\n\t\treturn true;\n\t},\n\n\n\tgetAll(saveFlag=false){\n\t\treturn new Promise( (_resolve, _reject)=>{\n\t\t\tpg.log('[Model]:feedContents.getAll(): Updating all Feeds...');\n\t\t\tvar currentFeed = -1;\n\t\t\t// Loop through the Feeds with array.reduce...\n\t\t\tpg.models.storage.Data.feeds.reduce( (sequence) => {\n\t\t\t\treturn sequence.then( ()=> {\n\t\t\t\t\tcurrentFeed++;\n\t\t\t \t\treturn feedContents.get(pg.models.storage.Data.feeds[currentFeed].id, saveFlag);\n\t\t\t\t}).then( (result)=> {\n\t\t\t\t\tif(result) pg.log('[Model]:feedContents.getAll(): Feed #'+ ( currentFeed + 1) +' ' + pg.models.storage.Data.feeds[currentFeed].name + ' UPDATED' );\n\t\t\t    \telse  pg.log('[Model]:feedContents.getAll(): Feed #'+ ( currentFeed + 1) +' ' + pg.models.storage.Data.feeds[currentFeed].name + ' FAILED' );\n\t\t\t  \t\tif( (currentFeed + 1)=== pg.models.storage.Data.feeds.length) _resolve();\n\t\t\t  \t});\n\t\t\t} , Promise.resolve());\n\t\t});\n\t},\n\n\tget(id=undefined, saveFlag=false){\n\t\t//\n\t\t// TODO: check if was previously cached, if not expired yet\n\t\t// return cached data\n\t\t//\n\t\treturn new Promise( _resolve=>{\n\t\t\tif(id === undefined || id === null || id === ''){\n\t\t\t\tpg.log('[Model]:feedContents.get() : No id provided. Returning...', 'warn');\n\t\t\t\treturn _resolve(-1);\n\t\t\t}\n\n\t\t\t// get feed (allow feed Id index or string url feed)\n\t\t\tlet f;\n\n\t\t\tf = pg.models.feeds.get(id);\n\t\t\tif( f === -1 ) f = { url : id , name : '***', status : {}};\n\n\t\t\tf.status.code = 100;\n\t\t\tf.status.details = 'Updating...';\n\t\t\tf.status.lastCheck = new Date();\n\n\t\t\tpg.log('[Model]:feedContents.get() : Updating Feed from :'+ f.url +' ( ' + f.name + ' )' );\n\n\t\t\t//\n\t\t\t// Prepare Ajax request\n\t\t\t//\n\t\t\tlet http = new XMLHttpRequest();\n\t\t\thttp.open('get', f.url, true);\n\n\t\t\t// RESPONSE OK\n\t\t\thttp.onload  = r=>{\n\t\t\t\tlet parser = new DOMParser();\n\t\t\t   \tlet xmlDoc = parser.parseFromString(http.responseText,'text/xml');\n\t\t\t\tlet JSONxml = pg.JSON.parseXML(xmlDoc, true);\n\n\t\t\t\tf.status.code = 200;\n\t\t\t\tf.status.details = 'Update Ok';\n\n\t\t\t\thttp = null;\n\t\t\t\tif( !JSONxml.hasOwnProperty('rss') ||\n\t\t\t\t\t!JSONxml.rss.hasOwnProperty('channel') ||\n\t\t\t\t\t! JSONxml.rss.channel.hasOwnProperty('item') ){\n\t\t\t\t\t\tpg.log('[Model]:feedContents.get(): Invalid XML RSS structure. Aborting...', 'warn');\n\t\t\t\t\t\treturn _resolve(-1);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tif(saveFlag === true) feedContents.save(id,JSONxml.rss.channel.item);\n\t\t\t\t\t\treturn _resolve(JSONxml.rss.channel.item);\n\t\t\t\t\t}\n\t\t\t};\n\t\t\t// RESPONSE FAIL\n\t\t\thttp.onerror  = r=>{\n\t\t\t\tpg.log('[Model]:feedContents.get(): Error on request. ' + http.statusText, 'warn');\n\t\t\t\tf.status.code =  400;\n\t\t\t\tf.status.details = 'Update Fail';\n\t\t\t\tf.status.lastCheck = new Date();\n\t\t\t\thttp = null;\n\t\t\t\tif(saveFlag === true) feedContents.save(id,[]);\n\t\t\t\treturn _resolve(false);\n\t\t\t};\n\t\t\t// Send Request\n\t\t\thttp.send(null);\n\t\t});\n\t},\n};\n\nexport default feedContents;\n"]}