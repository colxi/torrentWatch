{"version":3,"sources":["feedContents.es6"],"names":["feedContents","__constructor","Promise","_resolve","pg","load","module","then","model","r","tasks","scheduleUpdates","getAll","_reject","log","currentFeed","app","Data","feeds","reduce","sequence","get","id","result","name","length","resolve","undefined","f","models","url","status","code","details","lastCheck","Date","http","XMLHttpRequest","open","onload","parser","DOMParser","xmlDoc","parseFromString","responseText","JSONxml","JSON","parseXML","onerror","statusText","send"],"mappings":"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","file":"feedContents.js","sourcesContent":["/* jsHint inline configuration : */\n/* jshint undef: true, unused: false */\n/* global chrome , System , pg , rivets , sightglass */\n\n\nlet feedContents = {\n\t__constructor(){\n\t\t return new Promise(function(_resolve){\n\t\t\tpg.load.module('JSON/parseXML')\n\t\t\t\t.then( r => pg.load.model('feeds') )\n\t\t\t\t.then( r=> _resolve(r) );\n        });\n\t},\n\n \ttasks : [],\n\n\tscheduleUpdates(){\n\t    return new Promise( _resolve => {\n\t    \t_resolve();\n\t        /*\n\t        console.log('chromeExt.scheduler.initialize(): Scheduling SYNC for '+ chromeExt.Data.feeds.length+' feeds sources...');\n\t        console.log(chromeExt.Data);\n\t        for(let i=0; i<chromeExt.Data.feeds.length; i++){\n\t            console.log('chromeExt.scheduler.initialize(): Scheduling ' + chromeExt.Data.feeds[i].name +' (TTL : '+ chromeExt.Data.feeds[i].TTL + ' min)');\n\t            chromeExt.scheduler.tasks.push(\n\t                setInterval( function(){\n\t                    console.log('checking feed...');\n\t                }, chromeExt.Data.feeds[i].TTL * 60 * 1000)\n\t            );\n\t        }\n\t        */\n\t    });\n\t},\n\n\n\tgetAll(){\n\t\treturn new Promise( (_resolve, _reject)=>{\n\t\t\tpg.log('pg.updateAllFeeds(): Updating all Feeds...');\n\t\t\tvar currentFeed = -1;\n\t\t\t// Loop through the Feeds with array.reduce...\n\t\t\tapp.Data.feeds.reduce( (sequence) => {\n\t\t\t\treturn sequence.then( ()=> {\n\t\t\t\t\tcurrentFeed++;\n\t\t\t \t\treturn feedContents.get(app.Data.feeds[currentFeed].id);\n\t\t\t\t}).then( (result)=> {\n\t\t\t\t\tif(result) pg.log('pg.updateAllFeeds(): Feed #'+ ( currentFeed + 1) +' ' + app.Data.feeds[currentFeed].name + ' UPDATED' );\n\t\t\t    \telse  pg.log('pg.updateAllFeeds(): Feed #'+ ( currentFeed + 1) +' ' + app.Data.feeds[currentFeed].name + ' FAILED' );\n\t\t\t  \t\tif( (currentFeed + 1)=== app.Data.feeds.length) _resolve();\n\t\t\t  \t});\n\t\t\t} , Promise.resolve());\n\t\t});\n\t},\n\n\tget(id){\n\t\treturn new Promise( _resolve=>{\n\t\t\tif(id === undefined || id === null || id === '') return _resolve(-1);\n\n\t\t\t// get feed (allow feed Id index or string url feed)\n\t\t\tlet f;\n\n\t\t\tf = pg.models.feeds.get(id);\n\t\t\tif( f === -1 ) f = { url : id , name : '***', status : {}};\n\n\t\t\tf.status.code = 100;\n\t\t\tf.status.details = 'Updating...';\n\t\t\tf.status.lastCheck = new Date();\n\n\t\t\tpg.log('pg.updateFeed() : Updating Feed from :'+ f.url +' ( ' + f.name + ' )' );\n\n\t\t\t//\n\t\t\t// Prepare Ajax request\n\t\t\t//\n\t\t\tlet http = new XMLHttpRequest();\n\t\t\thttp.open('get', f.url, true);\n\n\t\t\t// RESPONSE OK\n\t\t\thttp.onload  = r=>{\n\t\t\t\tlet parser = new DOMParser();\n\t\t\t   \tlet xmlDoc = parser.parseFromString(http.responseText,'text/xml');\n\t\t\t\tlet JSONxml = pg.JSON.parseXML(xmlDoc, true);\n\n\t\t\t\tf.status.code = 200;\n\t\t\t\tf.status.details = 'Ok';\n\n\t\t\t\thttp = null;\n\t\t\t\treturn _resolve(JSONxml);\n\t\t\t};\n\t\t\t// RESPONSE FAIL\n\t\t\thttp.onerror  = r=>{\n\t\t\t\tpg.log('pg.getFeed(): Error on request... ' + http.statusText);\n\t\t\t\tf.status.code =  400;\n\t\t\t\tf.status.details = 'Fail';\n\t\t\t\thttp = null;\n\t\t\t\treturn _resolve(false);\n\t\t\t};\n\t\t\t// Send Request\n\t\t\thttp.send(null);\n\t\t});\n\t},\n};\n\nexport default feedContents;\n"]}