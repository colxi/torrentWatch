{"version":3,"sources":["element.es6"],"names":[],"mappings":"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","file":"element.js","sourcesContent":["//\r\n// usage example :\r\n// element(\"#myElement\").parent()\r\n//\r\nlet DOM = {\r\n    element : function(elem) {\r\n        if(typeof elem === 'string') elem = document.querySelector(elem);\r\n        if(!elem) elem = undefined;\r\n        return  {\r\n            /**\r\n             * closest() Returns the closest matching element up the DOM tree (provided\r\n             * element is a candidate).\r\n             * @param  {DOM Element}            elem        Starting element\r\n             * @param  {String}                 selector    Selector to match against\r\n             *                                              (class, ID, data attribute, or tag)\r\n             *\r\n             * @return {DOM Element | null}                 Returns DOM ELEMENT or null if not match found\r\n             */\r\n            closest : function ( selector ) {\r\n                if( elem === undefined ) return undefined;\r\n                // Variables\r\n                let firstChar = selector.charAt(0);\r\n                let supports = 'classList' in document.documentElement;\r\n                let attribute;\r\n                let value;\r\n\r\n                // If selector is a data attribute, split attribute from value\r\n                if ( firstChar === '[' ) {\r\n                    selector = selector.substr( 1, selector.length - 2 );\r\n                    attribute = selector.split( '=' );\r\n\r\n                    if ( attribute.length > 1 ) {\r\n                        value = true;\r\n                        attribute[1] = attribute[1].replace( /\"/g, '' ).replace( /'/g, '' );\r\n                    }\r\n                }\r\n\r\n                // Get closest match\r\n                for ( ; elem && elem !== document && elem.nodeType === 1; elem = elem.parentNode ) {\r\n                    switch(firstChar){\r\n                        // If selector is a class\r\n                       case '.' :\r\n                            if ( supports )  if ( elem.classList.contains( selector.substr(1) ) ) return elem;\r\n                            else if ( new RegExp('(^|\\\\s)' + selector.substr(1) + '(\\\\s|$)').test( elem.className ) ) return elem;\r\n                            break;\r\n                        case '#' :\r\n                             if( elem.id === selector.substr(1) ) return elem;\r\n                             break;\r\n                        case '[' :\r\n                            if ( elem.hasAttribute( attribute[0] ) ) {\r\n                                if ( value && elem.getAttribute( attribute[0] ) === attribute[1] ) return elem;\r\n                                else return elem;\r\n                            }\r\n                            break;\r\n                        default:\r\n                            // If selector is a tag\r\n                            if ( elem.tagName.toLowerCase() === selector )  return elem;\r\n                            break;\r\n                    }\r\n                }\r\n                return null;\r\n\r\n            },\r\n            /**\r\n             * parent() will return the closest element matching with the provided selector\r\n             * without considering provided node ( like closest() does )\r\n             * @param  {DOM element}            elem        Starting element\r\n             * @param  {string}                 selector    Selector to match against\r\n             *                                              (class, ID, data attribute, or tag)\r\n             *\r\n             * @return {DOM element | null}                 Returns DOM element or null if not match found\r\n             */\r\n            parent :function(selector){\r\n                if( elem === undefined ) return undefined;\r\n                elem = elem.parentNode;\r\n                var selection = DOM.element.closest( selector);\r\n                if(typeof selection === 'undefined') return null;\r\n                else return selection;\r\n            },\r\n            /**\r\n             * parents() will return an ascending ordered array, with all the parents\r\n             * nodes for the provided DOM element, until BODY node is reached\r\n             * @param  {DOM element}            elem    Starting element\r\n             *\r\n             * @return {Array}                          Returns an array\r\n             */\r\n            parents: function(_a) {\r\n                if( elem === undefined ) return undefined;\r\n                if(_a === undefined) _a = []; // initial call\r\n                else _a.push(elem); // add current element\r\n                // do recursion until BODY is reached\r\n                if(elem.tagName !== 'BODY' ){\r\n                    elem = elem.parentNode;\r\n                    return DOM.element.parents(_a);\r\n                }else return _a;\r\n            },\r\n            find : function(selector){\r\n                if( elem === undefined ) return undefined;\r\n                let selection = elem.querySelectorAll(selector);\r\n                if(typeof selection === 'undefined') return null;\r\n                else return selection;\r\n            }\r\n        };\r\n    }\r\n};\r\n\r\nexport default DOM.element;\r\n"]}