{"version":3,"sources":["element.es6"],"names":["DOM","element","elem","document","querySelector","undefined","closest","selector","firstChar","charAt","supports","documentElement","attribute","value","substr","length","split","replace","nodeType","parentNode","classList","contains","RegExp","test","className","id","hasAttribute","getAttribute","tagName","toLowerCase","parent","selection","parents","_a","push","find","querySelectorAll"],"mappings":"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","file":"element.js","sourcesContent":["//\n// usage example :\n// element(\"#myElement\").parent()\n//\nlet DOM = {\n    element : function(elem) {\n        if(typeof elem === 'string') elem = document.querySelector(elem);\n        if(!elem) elem = undefined;\n        return  {\n            /**\n             * closest() Returns the closest matching element up the DOM tree (provided\n             * element is a candidate).\n             * @param  {DOM Element}            elem        Starting element\n             * @param  {String}                 selector    Selector to match against\n             *                                              (class, ID, data attribute, or tag)\n             *\n             * @return {DOM Element | null}                 Returns DOM ELEMENT or null if not match found\n             */\n            closest : function ( selector ) {\n                if( elem === undefined ) return undefined;\n                // Variables\n                let firstChar = selector.charAt(0);\n                let supports = 'classList' in document.documentElement;\n                let attribute;\n                let value;\n\n                // If selector is a data attribute, split attribute from value\n                if ( firstChar === '[' ) {\n                    selector = selector.substr( 1, selector.length - 2 );\n                    attribute = selector.split( '=' );\n\n                    if ( attribute.length > 1 ) {\n                        value = true;\n                        attribute[1] = attribute[1].replace( /\"/g, '' ).replace( /'/g, '' );\n                    }\n                }\n\n                // Get closest match\n                for ( ; elem && elem !== document && elem.nodeType === 1; elem = elem.parentNode ) {\n                    switch(firstChar){\n                        // If selector is a class\n                       case '.' :\n                            if ( supports )  if ( elem.classList.contains( selector.substr(1) ) ) return elem;\n                            else if ( new RegExp('(^|\\\\s)' + selector.substr(1) + '(\\\\s|$)').test( elem.className ) ) return elem;\n                            break;\n                        case '#' :\n                             if( elem.id === selector.substr(1) ) return elem;\n                             break;\n                        case '[' :\n                            if ( elem.hasAttribute( attribute[0] ) ) {\n                                if ( value && elem.getAttribute( attribute[0] ) === attribute[1] ) return elem;\n                                else return elem;\n                            }\n                            break;\n                        default:\n                            // If selector is a tag\n                            if ( elem.tagName.toLowerCase() === selector )  return elem;\n                            break;\n                    }\n                }\n                return null;\n\n            },\n            /**\n             * parent() will return the closest element matching with the provided selector\n             * without considering provided node ( like closest() does )\n             * @param  {DOM element}            elem        Starting element\n             * @param  {string}                 selector    Selector to match against\n             *                                              (class, ID, data attribute, or tag)\n             *\n             * @return {DOM element | null}                 Returns DOM element or null if not match found\n             */\n            parent :function(selector){\n                if( elem === undefined ) return undefined;\n                elem = elem.parentNode;\n                var selection = DOM.element.closest( selector);\n                if(typeof selection === 'undefined') return null;\n                else return selection;\n            },\n            /**\n             * parents() will return an ascending ordered array, with all the parents\n             * nodes for the provided DOM element, until BODY node is reached\n             * @param  {DOM element}            elem    Starting element\n             *\n             * @return {Array}                          Returns an array\n             */\n            parents: function(_a) {\n                if( elem === undefined ) return undefined;\n                if(_a === undefined) _a = []; // initial call\n                else _a.push(elem); // add current element\n                // do recursion until BODY is reached\n                if(elem.tagName !== 'BODY' ){\n                    elem = elem.parentNode;\n                    return DOM.element.parents(_a);\n                }else return _a;\n            },\n            find : function(selector){\n                if( elem === undefined ) return undefined;\n                let selection = elem.querySelectorAll(selector);\n                if(typeof selection === 'undefined') return null;\n                else return selection;\n            }\n        };\n    }\n};\n\nexport default DOM.element;\n"]}