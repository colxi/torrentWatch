{"version":3,"sources":["DOMselector.es6"],"names":[],"mappings":";;AACA,IAAM,cAAc;;;;;;;;;;AAUhB,aAAU,iBAAW,IAAX,EAAiB,QAAjB,EAA4B;;AAElC,YAAI,YAAY,SAAS,MAAT,CAAgB,CAAhB,CAAhB;AACA,YAAI,WAAW,eAAe,SAAS,eAAvC;AACA,YAAI,kBAAJ;AACA,YAAI,cAAJ;;;AAGA,YAAK,cAAc,GAAnB,EAAyB;AACrB,uBAAW,SAAS,MAAT,CAAiB,CAAjB,EAAoB,SAAS,MAAT,GAAkB,CAAtC,CAAX;AACA,wBAAY,SAAS,KAAT,CAAgB,GAAhB,CAAZ;;AAEA,gBAAK,UAAU,MAAV,GAAmB,CAAxB,EAA4B;AACxB,wBAAQ,IAAR;AACA,0BAAU,CAAV,IAAe,UAAU,CAAV,EAAa,OAAb,CAAsB,IAAtB,EAA4B,EAA5B,EAAiC,OAAjC,CAA0C,IAA1C,EAAgD,EAAhD,CAAf;AACH;AACJ;;;AAGD,eAAQ,QAAQ,SAAS,QAAjB,IAA6B,KAAK,QAAL,KAAkB,CAAvD,EAA0D,OAAO,KAAK,UAAtE,EAAmF;AAC/E,oBAAO,SAAP;;AAEG,qBAAK,GAAL;AACK,wBAAK,QAAL,EAAiB,IAAK,KAAK,SAAL,CAAe,QAAf,CAAyB,SAAS,MAAT,CAAgB,CAAhB,CAAzB,CAAL,EAAqD,OAAO,IAAP,CAArD,KACZ,IAAK,IAAI,MAAJ,CAAW,YAAY,SAAS,MAAT,CAAgB,CAAhB,CAAZ,GAAiC,SAA5C,EAAuD,IAAvD,CAA6D,KAAK,SAAlE,CAAL,EAAqF,OAAO,IAAP;AAC1F;AACJ,qBAAK,GAAL;AACK,wBAAI,KAAK,EAAL,KAAY,SAAS,MAAT,CAAgB,CAAhB,CAAhB,EAAqC,OAAO,IAAP;AACrC;AACL,qBAAK,GAAL;AACI,wBAAK,KAAK,YAAL,CAAmB,UAAU,CAAV,CAAnB,CAAL,EAAyC;AACrC,4BAAK,SAAS,KAAK,YAAL,CAAmB,UAAU,CAAV,CAAnB,MAAsC,UAAU,CAAV,CAApD,EAAmE,OAAO,IAAP,CAAnE,KACK,OAAO,IAAP;AACR;AACD;AACJ;;AAEI,wBAAK,KAAK,OAAL,CAAa,WAAb,OAA+B,QAApC,EAAgD,OAAO,IAAP;AAChD;AAlBR;AAoBH;AACD,eAAO,IAAP;AAEH,KArDe;;;;;;;;;;AA+DhB,YAAQ,gBAAS,IAAT,EAAe,QAAf,EAAwB;AAC5B,YAAI,YAAY,YAAY,OAAZ,CAAoB,KAAK,UAAzB,EAAqC,QAArC,CAAhB;AACA,YAAG,OAAO,SAAP,KAAqB,WAAxB,EAAqC,OAAO,IAAP,CAArC,KACK,OAAO,SAAP;AACR,KAnEe;;;;;;;;AA2EhB,aAAS,iBAAS,IAAT,EAAe;AACpB,YAAI,KAAK,UAAU,CAAV,CAAT;AACA,YAAG,OAAO,SAAV,EAAqB,KAAK,EAAL,C;AAArB,aACK,GAAG,IAAH,CAAQ,IAAR,E;;AAEL,YAAG,KAAK,OAAL,KAAiB,MAApB,EAA6B,OAAO,YAAY,OAAZ,CAAoB,KAAK,UAAzB,EAAqC,EAArC,CAAP,CAA7B,KACK,OAAO,EAAP;AACR,KAlFe;AAmFhB,UAAO,cAAS,IAAT,EAAe,QAAf,EAAwB;AAC3B,YAAI,YAAY,KAAK,gBAAL,CAAsB,QAAtB,CAAhB;AACA,YAAG,OAAO,SAAP,KAAqB,WAAxB,EAAqC,OAAO,IAAP,CAArC,KACK,OAAO,SAAP;AACR;AAvFe,CAApB","file":"DOMselector.js","sourcesContent":["\r\nconst DOMselector = {\r\n    /**\r\n     * closest() Returns the closest matching element up the DOM tree (provided\r\n     * element is a candidate).\r\n     * @param  {DOM Element}            elem        Starting element\r\n     * @param  {String}                 selector    Selector to match against\r\n     *                                              (class, ID, data attribute, or tag)\r\n     *\r\n     * @return {DOM Element | null}                 Returns DOM ELEMENT or null if not match found\r\n     */\r\n    closest : function ( elem, selector ) {\r\n        // Variables\r\n        let firstChar = selector.charAt(0);\r\n        let supports = 'classList' in document.documentElement;\r\n        let attribute;\r\n        let value;\r\n\r\n        // If selector is a data attribute, split attribute from value\r\n        if ( firstChar === '[' ) {\r\n            selector = selector.substr( 1, selector.length - 2 );\r\n            attribute = selector.split( '=' );\r\n\r\n            if ( attribute.length > 1 ) {\r\n                value = true;\r\n                attribute[1] = attribute[1].replace( /\"/g, '' ).replace( /'/g, '' );\r\n            }\r\n        }\r\n\r\n        // Get closest match\r\n        for ( ; elem && elem !== document && elem.nodeType === 1; elem = elem.parentNode ) {\r\n            switch(firstChar){\r\n                // If selector is a class\r\n               case '.' :\r\n                    if ( supports )  if ( elem.classList.contains( selector.substr(1) ) ) return elem;\r\n                    else if ( new RegExp('(^|\\\\s)' + selector.substr(1) + '(\\\\s|$)').test( elem.className ) ) return elem;\r\n                    break;\r\n                case '#' :\r\n                     if( elem.id === selector.substr(1) ) return elem;\r\n                     break;\r\n                case '[' :\r\n                    if ( elem.hasAttribute( attribute[0] ) ) {\r\n                        if ( value && elem.getAttribute( attribute[0] ) === attribute[1] ) return elem;\r\n                        else return elem;\r\n                    }\r\n                    break;\r\n                default:\r\n                    // If selector is a tag\r\n                    if ( elem.tagName.toLowerCase() === selector )  return elem;\r\n                    break;\r\n            }\r\n        }\r\n        return null;\r\n\r\n    },\r\n    /**\r\n     * parent() will return the closest element matching with the provided selector\r\n     * without considering provided node ( like closest() does )\r\n     * @param  {DOM element}            elem        Starting element\r\n     * @param  {string}                 selector    Selector to match against\r\n     *                                              (class, ID, data attribute, or tag)\r\n     *\r\n     * @return {DOM element | null}                 Returns DOM element or null if not match found\r\n     */\r\n    parent :function(elem, selector){\r\n        var selection = DOMselector.closest(elem.parentNode, selector);\r\n        if(typeof selection === 'undefined') return null;\r\n        else return selection;\r\n    },\r\n    /**\r\n     * parents() will return an ascending ordered array, with all the parents\r\n     * nodes for the provided DOM element, until BODY node is reached\r\n     * @param  {DOM element}            elem    Starting element\r\n     *\r\n     * @return {Array}                          Returns an array\r\n     */\r\n    parents: function(elem) {\r\n        var _a = arguments[1];\r\n        if(_a === undefined) _a = []; // initial call\r\n        else _a.push(elem); // add current element\r\n        // do recursion until BODY is reached\r\n        if(elem.tagName !== 'BODY' ) return DOMselector.parents(elem.parentNode, _a);\r\n        else return _a;\r\n    },\r\n    find : function(elem, selector){\r\n        let selection = elem.querySelectorAll(selector);\r\n        if(typeof selection === 'undefined') return null;\r\n        else return selection;\r\n    }\r\n};\r\n"]}