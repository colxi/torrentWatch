{"version":3,"sources":["../../src/js/main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function(){\n\t'use strict';\n\n\tvar observers = {};\n\n\twindow.app = {\n\t\tfeeds : [\n\t\t\t{\n\t\t\t\tid \t\t\t: 0,\n\t\t\t\tname \t\t: 'Kat Movies',\n\t\t\t\turl \t\t: 'https://kat.cr/movies/?rss=1',\n\t\t\t\tproperty\t: 'title',\n\t\t\t\tTTL \t\t: 10,\n\t\t\t\titems \t\t: {}\n\t\t\t},{\n\t\t\t\tid \t\t\t: 1,\n\t\t\t\tname \t\t: 'Mininova Movies',\n\t\t\t\turl \t\t: 'http://www.mininova.org/rss.xml?cat=4',\n\t\t\t\tproperty\t: 'title',\n\t\t\t\tTTL \t\t: 10,\n\t\t\t\titems \t\t: {}\n\t\t\t},{\n\t\t\t\tid \t\t\t: 2,\n\t\t\t\tname \t\t: 'YIFY Movies',\n\t\t\t\turl \t\t: 'https://yts.ag/rss',\n\t\t\t\tproperty\t: 'title',\n\t\t\t\tTTL \t\t: 10,\n\t\t\t\titems \t\t: {}\n\t\t\t}\n\t\t],\n\t\t_init : document.addEventListener('DOMContentLoaded', function() {\n  \t\t\tconsole.log(\"Starting Torrent Observer\");\n  \t\t\tdelete app._init;\n\n  \t\t\t// set html file for toolbar icon popup\n  \t\t\tchrome.browserAction.setPopup( {popup:'views/popup/popup.html'} );\n\t\t\tapp.popup = chrome.extension.getViews()[1].document;\n\n\t\t\tapp.updateAllFeeds().then(function(){ console.log('Init done'); });\n\t\t}),\n\t\tpopup : null,\n\t\tupdateAllFeeds : function(){\n\t\t\treturn new Promise(function(resolve, reject){\n\t\t\t\tconsole.log('app.updateAllFeeds(): Updating all Feeds...');\n\t\t\t\tvar currentFeed = -1;\n\t\t\t\t// Loop through the Feeds with array.reduce...\n\t\t\t\tapp.feeds.reduce(function(sequence) {\n\t\t\t\t\treturn sequence.then(function() {\n\t\t\t\t\t\tcurrentFeed++;\n\t\t\t\t \t\treturn app.updateFeed(currentFeed);\n\t\t\t\t\t}).then(function(result) {\n\t\t\t\t\t\tif(result) console.log('app.updateAllFeeds(): Feed #'+ ( currentFeed + 1) +' ' + app.feeds[currentFeed].name + ' UPDATED (' + result + ')' );\n\t\t\t\t    \telse  console.log('app.updateAllFeeds(): Feed #'+ ( currentFeed + 1) +' ' + app.feeds[currentFeed].name + ' FAILED (' + result + ')' );\n\t\t\t\t  \t});\n\t\t\t\t} , Promise.resolve());\n\t\t\t});\n\t\t},\n\t\tupdateFeed: function(i){\n\t\t\treturn new Promise( function(resolve, reject){\n\t\t\t\t// block if requested feed does not exist\n\t\t\t\tif(i >= app.feeds.length) return reject(-1);\n\t\t\t\t// get feed\n\t\t\t\tvar feed = app.feeds[i];\n\t\t\t\tconsole.log('app.updateFeed() : Updating Feed (#'+ ( feed.id ) +' : ' + feed.name + ')');\n\t\t\t\t//\n\t\t\t\t// Prepare Ajax request\n\t\t\t\t//\n\t\t\t\tvar request = new XMLHttpRequest();\n\t\t\t\trequest.open(\"get\", feed.url, true);\n\t\t\t\t// RESPONSE OK\n\t\t\t\trequest.onload  = function(_http){\n\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t   \tvar xmlDoc = parser.parseFromString(request.responseText,\"text/xml\");\n\t\t\t\t\tconsole.log(xmlDoc);\n\t\t\t\t\txotree = new XML.ObjTree();\n\t\t\t\t\trequest = null;\n\t\t\t\t\treturn resolve(true);\n\t\t\t\t};\n\t\t\t\t// RESPONSE FAIL\n\t\t\t\trequest.onerror  = function(_http){\n\t\t\t\t\tconsole.log(\"Error\", request.statusText);\n\t\t\t\t\trequest = null;\n\t\t\t\t\treturn resolve(false);\n\t\t\t\t};\n\t\t\t\t// Send Request\n\t\t\t\trequest.send(null);\n\t\t\t});\n\t\t}\n\t};\n\n\n})();\n\n// Copyright (c) 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * Get the current URL.\n *\n * @param {function(string)} callback - called when the URL of the current tab\n *   is found.\n */\nfunction getCurrentTabUrl(callback) {\n  // Query filter to be passed to chrome.tabs.query - see\n  // https://developer.chrome.com/extensions/tabs#method-query\n  var queryInfo = {\n    active: true,\n    currentWindow: true\n  };\n\n  chrome.tabs.query(queryInfo, function(tabs) {\n    // chrome.tabs.query invokes the callback with a list of tabs that match the\n    // query. When the popup is opened, there is certainly a window and at least\n    // one tab, so we can safely assume that |tabs| is a non-empty array.\n    // A window can only have one active tab at a time, so the array consists of\n    // exactly one tab.\n    var tab = tabs[0];\n\n    // A tab is a plain object that provides information about the tab.\n    // See https://developer.chrome.com/extensions/tabs#type-Tab\n    var url = tab.url;\n\n    // tab.url is only available if the \"activeTab\" permission is declared.\n    // If you want to see the URL of other tabs (e.g. after removing active:true\n    // from |queryInfo|), then the \"tabs\" permission is required to see their\n    // \"url\" properties.\n    console.assert(typeof url == 'string', 'tab.url should be a string');\n\n    callback(url);\n  });\n\n  // Most methods of the Chrome extension APIs are asynchronous. This means that\n  // you CANNOT do something like this:\n  //\n  // var url;\n  // chrome.tabs.query(queryInfo, function(tabs) {\n  //   url = tabs[0].url;\n  // });\n  // alert(url); // Shows \"undefined\", because chrome.tabs.query is async.\n}\n\n\n"]}